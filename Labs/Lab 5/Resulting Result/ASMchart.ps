%!PS-Adobe-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.4 (Build 18E226) Quartz PS Context)
%%Title: (ASMchart)
%%Creator: (VisualDesigner: cgpdftops CUPS filter)
%%CreationDate: (Tuesday, April 02 2019 20:15:32 EDT)
%%For: (Dean Chong San)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%PageOrder: Ascend
%RBINumCopies: 1
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
userdict/dscInfo 5 dict dup begin
/Title(ASMchart)def
/Creator(VisualDesigner: cgpdftops CUPS filter)def
/CreationDate(Tuesday, April 02 2019 20:15:32 EDT)def
/For(Dean Chong San)def
/Pages 1 def
end put
%%BeginProlog
%%BeginFile: lw8_errorhandler-2.0
/currentpacking where 
	{ pop /oldpack currentpacking def /setpacking where
		{
			pop false setpacking
		}if
	}if
/$brkpage 64 dict def $brkpage begin
/prnt
 {dup type/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
  currentpoint/toy exch def/tox exch def 1 setgray newpath
  tox toy 2 sub moveto 0 ty rlineto tx 0 rlineto 0 ty neg rlineto
  closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
/=={/cp 0 def typeprint nl}def
/typeprint{dup type exec}readonly def
/lmargin 72 def
/rmargin 72 def
/tprint
   {dup length cp add rmargin gt{nl/cp 0 def}if
    dup length cp add/cp exch def prnt}readonly def
/cvsprint{=string cvs tprint( )tprint}readonly def
/integertype{cvsprint}readonly def
/realtype{cvsprint}readonly def
/booleantype{cvsprint}readonly def
/operatortype{(--)tprint =string cvs tprint(-- )tprint}readonly def
/marktype{pop(-mark- )tprint}readonly def
/dicttype{pop(-dictionary- )tprint}readonly def
/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def
/fonttype{pop(-fontid- )tprint}readonly def
/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype
 {dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}ifelse
 }readonly def
/arraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}ifelse
 }readonly def
/packedarraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse
 }readonly def
/courier/Courier findfont 10 scalefont def
end %$brkpage
errordict/handleerror
 {systemdict begin $error begin $brkpage begin newerror
   {/newerror false store 
    vmstatus pop pop 0 ne{grestoreall}if initgraphics courier setfont
    lmargin 720 moveto(ERROR: )prnt errorname prnt
    nl(OFFENDING COMMAND: )prnt/command load prnt
 	$error/ostack known{
	$error/ostack get type dup/arraytype eq exch /packedarraytype eq or
   {nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if}if
    systemdict/showpage get exec(%%[ Error: )print
    errorname =print(; OffendingCommand: )print/command 
    load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put
/currentpacking where 
	{ pop  /setpacking where
		{
			pop oldpack setpacking
		}if
	}if
%%EndFile
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
% Disable CTRL-D as an end-of-file marker...
userdict dup(\004)cvn{}put (\004\004)cvn{}put
[{
%%BeginFeature: *Collate True
<</Collate true>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *ColorModel RGB
<</cupsColorSpace 19/cupsBitsPerColor 8/cupsColorOrder 0/cupsCompression 0>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Duplex None
<</Duplex false>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *MediaType any
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *PageSize Letter
<</PageSize[612.0000 792.0000]/ImagingBBox null/Orientation 0>>setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *cupsPrintQuality Normal
<</cupsInteger1 4 /HWResolution[600 600]>>setpagedevice
%%EndFeature
} stopped cleartomark
% x y w h ESPrc - Clip to a rectangle.
userdict/ESPrc/rectclip where{pop/rectclip load}
{{newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip newpath}bind}ifelse put
% x y w h ESPrf - Fill a rectangle.
userdict/ESPrf/rectfill where{pop/rectfill load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath fill grestore}bind}ifelse put
% x y w h ESPrs - Stroke a rectangle.
userdict/ESPrs/rectstroke where{pop/rectstroke load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath stroke grestore}bind}ifelse put
userdict/ESPwl{}bind put
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 612 792
%%BeginPageSetup
%%EndPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: WDIKHG+Helvetica
%!FontType1-1.0: WDIKHG+Helvetica 1.0000.0.0000
14 dict begin/FontName /WDIKHG+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /L put
dup 34 /O put
dup 35 /A put
dup 36 /D put
dup 37 /underscore put
dup 38 /S put
dup 39 /T put
dup 40 /E put
dup 41 /B put
dup 42 /I put
dup 43 /Q put
dup 44 /o put
dup 45 /space put
dup 46 /equal put
dup 47 /quoteleft put
dup 48 /one put
dup 49 /quoteright put
dup 50 /F put
dup 51 /R put
dup 52 /N put
dup 53 /Z put
dup 54 /C put
dup 55 /U put
dup 56 /eight put
dup 57 /X put
dup 58 /P put
dup 59 /H put
dup 60 /G put
dup 61 /zero put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<










636820B003266165B042236544B072234420B1625D4565234520B003266062636820B003266165B05D236544B0622344B1005D455458B15D406544B262406245236144592B2B2B2B456953427374B8019A2045694B20B02853B049515A58B020615944B801A6204569447500
00>] def
/CharStrings 30 dict dup begin
/.notdef 0 def
/space 1 def
/zero 2 def
/one 3 def
/eight 4 def
/equal 5 def
/A 6 def
/B 7 def
/C 8 def
/D 9 def
/E 10 def
/F 11 def
/G 12 def
/H 13 def
/I 14 def
/L 15 def
/N 16 def
/O 17 def
/P 18 def
/Q 19 def
/R 20 def
/S 21 def
/T 22 def
/U 23 def
/X 24 def
/Z 25 def
/underscore 26 def
/o 27 def
/quoteleft 28 def
/quoteright 29 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1947 -985 2961 2297}def
/UniqueID 4179358 def
currentdict currentfile eexec

78987FCCF4D211A81A1B8E41E900B5EFCA7311425B7F04E664D865DEE8FA1E9884A593E7093B6659E9A209E9B7F52FCAAD88EA8D63E7D8C4D0A8536AADDA1DA4EB29269AB28C95596031FE0333F63910786DB48A7A8B33E924C4EE96BDE8421F36A9865D72E70BE3B96951286E40CE9D33C6EF729415DE2A7526CFCB9F5B9A4E4A2DF0C39F9BBEF1066D66FCE49C352FD5203F75E720D0D437906713751CC57385BAB03F4F7859045999B8A40C6307F1EA198392CD96D7A646C9D7E1F1B04405F5717AA7FE41A11B2F217C61B327C413BE897E6B1C1FF6F0F09A54A16F6408CEA6D3A67325C247A3463736A7F400422C00FBABBE5966F6A681DECAC33EC2A223720FC514424BD1E1F5FEC4324A0C3237038E2486F77C9DB5DD07119ADCFBBC671D9A87EBAAD48EA03D5851423F90DFE15CC88E53479A298CA9C888B2C8081E8646E93B3A1B3957D6A773EFC2C32A268BF6FAEEAA3FAFCD08275A5D2D563FCCF504B56C73F120F9AC9331BCD37A996EABB2C557582DC1C15AEB4838FF4CC15AC0FB01D064826E8ED1691CA1501BE67B3E6A81001BA60256F6DA64E096491F8B505F20C2DE642336F2237637A11ADE51974F6E7111E044BCDF199F90B74D2DBC8BFC70A0D41B3A5BD0461E76C1DE895BE712226E7DDDFC0D94D3E7EE11DE652687D53E5E888D0F1DF50199C342A306E4EB6BB37648D1725482EDFB2FABF0C4FBF816248BF2EC98F7477F1809FE7F48CEB18B6347B07D767B6BAAAB39DA0876BE24425C04A8C2020CBBE860D4E943E55BF391188249FB99F84EB295C578413491C2FA7E71DF8F46BD6BABBA2D1620E2E425A18A2462FCBB8EF54F210B25BD60B34664ADAD35816747B4E37111F5790D991D7E74A956A1EABF02549380636A7AF14EE38D568AE9AD012AC1BAD7409D48C40032093271478DB0B788746DEB62B7241CD96FF5D485C48F22BCEC7A52348620FA818994FAEAABEBB4771C0A1EA28892D47DA188A55EEC7991816C405E8F036E627D14260C6AB2051E254569D7525ED961F39920CEAFBD95E4974E710BC65C2F9701C26A96D0554F153279DEF37A065078D8D5208E675FB1EB71DA381774F44DFDB7DC60D4A77DFB32DB9726F44E06D9BD95B05A365E8491C578E4EFCD437CBD086CD047C04460C126407D59783D59147BC951DB6C786E7B7583F52F1B24BDF5F41BA190ADEA8C9BAA70CB54A570E56FFF0BA4104A23D89D087A942025D3EA052E117D817DFE6D52CD1B4F0E5A028B057235B3FD9EF105D6EA28D511318E0283237E7394CFD05A7BD51578194491C6AFBCF04B4F5C4FFB3920559BE11698F2F5A62C82FA51D44D91FD8364196F179301A9299B0201F006C347B75F365244A62D8170D40D73FCFFD381D9520643C1E6EFE65BBEE186A9E53C21ADDA7B40E2D4E539820780E388DB470213303C21551ACA7B


102FEB2922B5D10CC77DC6A161BECF4FE7112454D18074B62CE643EC81E95FB512E4EB205F28FC02592134D152BA958E8CDBB6D73C86C48C358F447F2125867A0E1C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/WDIKHG+Helvetica cguidfix
/F1.1/WDIKHG+Helvetica renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
8.3906002 183.65981 595.21881 599.94958 rc
8.3906002 783.60938 m
603.60938 783.60938 l
603.60938 183.65981 l
8.3906002 183.65981 l
h
f
/Cs2 SC
1 1 1 sc
328.77631 706.19647 m
384.68561 706.19647 l
384.68561 684.69299 l
328.77631 684.69299 l
h
328.77631 706.19647 m
f
1 J
1 j
5 M
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
744.95947 180 m
874.95947 180 l
874.95947 230 l
744.95947 230 l
h
744.95947 180 m
S
/F1.1[ 12 0 0 -12 0 0]sf
771.83252 209.5 m
(!"#$%&'#'\()[ 6.674400 9.333600 8.004000 8.666400 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
1 1 1 sc
CM
328.77631 654.58801 m
384.68561 654.58801 l
384.68561 633.08441 l
328.77631 633.08441 l
h
328.77631 654.58801 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
744.95947 300 m
874.95947 300 l
874.95947 350 l
744.95947 350 l
h
744.95947 300 m
S
760.1665 329.5 m
('\(&'%\)*'%&'#'\()[ 7.329600 8.004000 8.004000 7.329600 6.674400 8.004000 3.333600 7.329600 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
809.95947 230 m
809.95947 281.39999 l
S
809.95947 281.39999 m
809.95947 300 l
808.57788 293.5 m
809.95947 300 l
811.34113 293.5 l
S
1 1 1 sc
CM
328.77631 590.07727 m
356.73099 602.97937 l
384.68561 590.07727 l
356.73099 577.17511 l
h
328.77631 590.07727 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
744.95947 450 m
809.95947 420 l
874.95947 450 l
809.95947 480 l
h
744.95947 450 m
S
789.11469 454.5 m
(+,-.-/01)[ 9.333600 6.674400 3.333600 7.008000 3.333600 2.666400 6.674400 0.000000 ] xS
809.95947 350 m
809.95947 401.39999 l
S
809.95947 401.39999 m
809.95947 420 l
808.57788 413.5 m
809.95947 420 l
811.34113 413.5 l
S
1 1 1 sc
CM
277.16779 559.97229 m
333.07709 559.97229 l
333.07709 538.46869 l
277.16779 538.46869 l
h
277.16779 559.97229 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
624.95947 520 m
754.95947 520 l
754.95947 570 l
624.95947 570 l
h
624.95947 520 m
S
634.50049 549.5 m
(2*3&'%"4\(%&'#'\()[ 7.329600 3.333600 8.666400 8.004000 7.329600 6.674400 9.333600 8.666400 8.004000 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
1 1 1 sc
CM
380.38489 559.97229 m
436.29419 559.97229 l
436.29419 538.46869 l
380.38489 538.46869 l
h
380.38489 559.97229 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
864.95947 520 m
994.95947 520 l
994.95947 570 l
864.95947 570 l
h
864.95947 520 m
S
872.15973 549.5 m
(&'*!!%5\(3"%&'#'\()[ 8.004000 7.329600 3.333600 6.674400 6.674400 6.674400 7.329600 8.004000 8.666400 9.333600 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
874.95947 450 m
929.95947 450 l
929.95947 501.39999 l
S
929.95947 501.39999 m
929.95947 520 l
928.57788 513.5 m
929.95947 520 l
931.34113 513.5 l
S
744.95947 450 m
689.95947 450 l
689.95947 501.39999 l
S
689.95947 501.39999 m
689.95947 520 l
688.57788 513.5 m
689.95947 520 l
691.34119 513.5 l
S
1 1 1 sc
CM
277.16779 508.36371 m
333.07709 508.36371 l
333.07709 486.86011 l
277.16779 486.86011 l
h
277.16779 508.36371 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
624.95947 640 m
754.95947 640 l
754.95947 690 l
624.95947 690 l
h
624.95947 640 m
S
630.2818 662 m
('\(&'%6"74'%"4\(%)[ 7.329600 8.004000 8.004000 7.329600 6.674400 8.666400 9.333600 8.666400 8.666400 7.329600 6.674400 9.333600 8.666400 8.004000 0.000000 ] xS
671.50842 677 m
(&'#'\()[ 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
1 1 1 sc
CM
380.38489 508.36371 m
436.29419 508.36371 l
436.29419 486.86011 l
380.38489 486.86011 l
h
380.38489 508.36371 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
864.95947 640 m
994.95947 640 l
994.95947 690 l
864.95947 690 l
h
864.95947 640 m
S
869.95361 662 m
('\(&'%6"74'%5\(3")[ 7.329600 8.004000 8.004000 7.329600 6.674400 8.666400 9.333600 8.666400 8.666400 7.329600 6.674400 7.329600 8.004000 8.666400 0.000000 ] xS
908.17139 677 m
(%&'#'\()[ 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
929.95947 570 m
929.95947 621.40002 l
S
929.95947 621.40002 m
929.95947 640 l
928.57788 633.5 m
929.95947 640 l
931.34113 633.5 l
S
689.95947 570 m
689.95947 621.40002 l
S
689.95947 621.40002 m
689.95947 640 l
688.57788 633.5 m
689.95947 640 l
691.34119 633.5 l
S
1 1 1 sc
CM
380.38489 443.853 m
408.33951 456.7551 l
436.29419 443.853 l
408.33951 430.9509 l
h
380.38489 443.853 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
864.95947 790 m
929.95947 760 l
994.95947 790 l
929.95947 820 l
h
864.95947 790 m
S
898.55908 794.5 m
(6"74'-.-8)[ 8.666400 9.333600 8.666400 8.666400 7.119600 3.333600 7.008000 3.333600 0.000000 ] xS
1 1 1 sc
CM
277.16779 443.853 m
305.12241 456.7551 l
333.07709 443.853 l
305.12241 430.9509 l
h
277.16779 443.853 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
624.95947 790 m
689.95947 760 l
754.95947 790 l
689.95947 820 l
h
624.95947 790 m
S
658.55908 794.5 m
(6"74'-.-8)[ 8.666400 9.333600 8.666400 8.666400 7.119600 3.333600 7.008000 3.333600 0.000000 ] xS
929.95947 690 m
929.95947 741.40002 l
S
929.95947 741.40002 m
929.95947 760 l
928.57788 753.5 m
929.95947 760 l
931.34113 753.5 l
S
689.95947 690 m
689.95947 741.40002 l
S
689.95947 741.40002 m
689.95947 760 l
688.57788 753.5 m
689.95947 760 l
691.34119 753.5 l
S
1 1 1 sc
CM
328.7612 396.5451 m
384.6705 396.5451 l
384.6705 375.0416 l
328.7612 375.0416 l
h
328.7612 396.5451 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
744.92432 900.00012 m
874.92432 900.00012 l
874.92432 950.00012 l
744.92432 950.00012 l
h
744.92432 900.00012 m
S
770.80127 929.50012 m
($"4\(%&'#'\()[ 8.666400 9.333600 8.666400 8.004000 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
1 1 1 sc
CM
214.8074 396.5451 m
270.71671 396.5451 l
270.71671 375.0416 l
214.8074 375.0416 l
h
214.8074 396.5451 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
479.9595 900.00012 m
609.95947 900.00012 l
609.95947 950.00012 l
479.9595 950.00012 l
h
479.9595 900.00012 m
S
507.16949 929.50012 m
(4\(9'%&'#'\()[ 8.666400 8.004000 8.004000 7.329600 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
1 1 1 sc
CM
266.41599 293.328 m
322.32529 293.328 l
322.32529 271.8244 l
266.41599 271.8244 l
h
266.41599 293.328 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
599.95947 1140 m
729.95947 1140 l
729.95947 1190 l
599.95947 1190 l
h
599.95947 1140 m
S
610.49658 1169.5 m
(2!*:%5\(3"%&'#'\()[ 7.329600 6.674400 3.333600 8.004000 6.674400 7.329600 8.004000 8.666400 9.333600 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
1 1 1 sc
CM
163.1989 293.328 m
219.1082 293.328 l
219.1082 271.8244 l
163.1989 271.8244 l
h
163.1989 293.328 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
359.9595 1140 m
489.9595 1140 l
489.9595 1190 l
359.9595 1190 l
h
359.9595 1140 m
S
374.16171 1169.5 m
(2!*:%"4\(%&'#'\()[ 7.329600 6.674400 3.333600 8.004000 6.674400 9.333600 8.666400 8.004000 6.674400 8.004000 6.445200 7.119600 7.329600 0.000000 ] xS
1 1 1 sc
CM
214.8074 332.03439 m
242.7621 344.93661 l
270.71671 332.03439 l
242.7621 319.13229 l
h
214.8074 332.03439 m
f
0 0 0 sc
0.43007141 0 0 -0.43007141 8.3906002 783.60938 cm
479.9595 1050 m
544.95947 1020 l
609.95947 1050 l
544.95947 1080 l
h
479.9595 1050 m
S
/F1.1[ 11 0 0 -11 0 0]sf
504.76761 1054 m
(&;*2'%3\(<-.-=)[ 7.337000 7.944200 3.055800 6.718800 6.718800 6.118200 7.944200 7.337000 8.555800 3.055800 6.424000 3.055800 0.000000 ] xS
[
2
2
] 0 d
720 287 m
900 287 l
900 490 l
720 490 l
h
720 287 m
S
0.85000002 w
/Cs1 SC
1 sc
720 287 m
900 287 l
900 490 l
720 490 l
h
720 287 m
S
1 w
[] 0 d
/Cs2 SC
0 0 0 sc
624.95947 790 m
544.95947 790 l
544.95947 881.40009 l
S
544.95947 881.40009 m
544.95947 900.00012 l
543.57788 893.50012 m
544.95947 900.00012 l
546.34113 893.50012 l
S
479.9595 1050 m
424.9595 1050 l
424.9595 1121.4 l
S
424.9595 1121.4 m
424.9595 1140 l
423.57791 1133.5 m
424.9595 1140 l
426.34109 1133.5 l
S
609.95947 1050 m
664.95947 1050 l
664.95947 1121.4 l
S
664.95947 1121.4 m
664.95947 1140 l
663.57788 1133.5 m
664.95947 1140 l
666.34113 1133.5 l
S
544.95947 950.00012 m
544.95947 985 l
544.95947 1002.5 l
S
544.95947 1002.5 m
544.95947 1020 l
543.57788 1013.5 m
544.95947 1020 l
546.34113 1013.5 l
S
424.9595 1190 m
424.9595 1237.3979 l
320.71179 1236.973 l
319.8107 667.49341 l
624.95947 665 l
S
606.36023 665.15198 m
624.95947 665 l
618.47101 666.43469 m
624.95947 665 l
618.44849 663.67151 l
S
664.95947 1190 m
664.95947 1237.766 l
422.40509 1237.476 l
S
809.91949 790.5 m
809.92352 881.40009 l
S
809.92352 881.40009 m
809.92432 900.00012 l
808.54272 893.50012 m
809.92432 900.00012 l
811.30542 893.50012 l
S
994.95947 790 m
1076.266 790 l
1076.266 325 l
893.55951 325 l
S
893.55951 325 m
874.95947 325 l
881.45947 323.61841 m
874.95947 325 l
881.45947 326.38159 l
S
754.95947 790 m
754.95947 790 l
864.95947 790 l
864.95947 790 l
S
/F1.1[ 12 0 0 -12 0 0]sf
746.29437 434.5 m
(')s
866.29437 434.5 m
(2)s
746.29437 774.5 m
(')s
866.29437 774.5 m
(')s
466.29449 1034.5 m
(')s
606.29449 1034.5 m
(2)s
626.29437 774.5 m
(2)s
986.29449 774.5 m
(2)s
[
2
2
] 0 d
860 508 m
999.91888 508 l
999.91888 578 l
860 578 l
h
860 508 m
S
0.85000002 w
/Cs1 SC
1 sc
860 508 m
999.91888 508 l
999.91888 578 l
860 578 l
h
860 508 m
S
1 w
/Cs2 SC
0 0 0 sc
619.95947 508 m
759.95947 508 l
759.95947 578 l
619.95947 578 l
h
619.95947 508 m
S
0.85000002 w
/Cs1 SC
1 sc
619.95947 508 m
759.95947 508 l
759.95947 578 l
619.95947 578 l
h
619.95947 508 m
S
1 w
/Cs2 SC
0 0 0 sc
740 887 m
880 887 l
880 957 l
740 957 l
h
740 887 m
S
0.85000002 w
/Cs1 SC
1 sc
740 887 m
880 887 l
880 957 l
740 957 l
h
740 887 m
S
ep
end
%%Trailer
%%Pages: 1
%%BoundingBox: 0 0 612 792
%%EOF
